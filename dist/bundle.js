!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);n(1);window.onload=function(){var t=new(function(){function e(){this.playerName=document.querySelector("#playerName"),this.playerStrength=document.querySelector("#playerStrength"),this.playerHealth=document.querySelector("#playerHealth"),this.monsterName=document.querySelector("#monsterName"),this.monsterStrength=document.querySelector("#monsterStrength"),this.monsterHealth=document.querySelector("#monsterHealth"),this.monsterList=document.querySelectorAll("#monsters input"),this.player=document.querySelector("#playerData"),this.listOfMonsters=[],this.monstervalue=0,this.consoleValue=document.querySelector("#console")}return e.prototype.getMonsterList=function(){for(var t=0,e=this.monsterList;t<e.length;t++){var n=e[t];n.dataset.name,n.dataset.health,n.dataset.strength;this.listOfMonsters.push(n.dataset.name),this.listOfMonsters.push(n.dataset.health),this.listOfMonsters.push(n.dataset.strength)}console.log(this.listOfMonsters)},e.prototype.getPlayer=function(){var t=this.player.dataset.name+" - "+this.player.dataset.health+" - "+this.player.dataset.strength;console.log(t)},e.prototype.render=function(){this.playerName.value=this.player.dataset.name,this.playerHealth.value=this.player.dataset.health,this.playerStrength.value=this.player.dataset.strength,this.monsterName.value=this.listOfMonsters[this.monstervalue],this.monsterHealth.value=this.listOfMonsters[this.monstervalue+1],this.monsterStrength.value=this.listOfMonsters[this.monstervalue+2],t.monstervalue>t.listOfMonsters.length-1&&(this.monsterName.value="",this.printOutWinner())},e.prototype.printOut=function(){var t=document.createElement("p");t.innerHTML="You attacked a monster and hit "+this.player.dataset.strength+" damage. "+this.listOfMonsters[this.monstervalue]+" hit you for "+this.listOfMonsters[this.monstervalue+2]+" damage",this.consoleValue.appendChild(t)},e.prototype.printOutKilled=function(){var t=document.createElement("p");t.innerHTML="You killed: "+this.listOfMonsters[this.monstervalue],this.consoleValue.appendChild(t)},e.prototype.printOutWinner=function(){var t=document.createElement("p");t.innerHTML="You won!",this.consoleValue.appendChild(t)},e}());t.getPlayer(),t.getMonsterList(),t.render(),document.querySelector("#fight").onclick=function(){t.printOut(),t.player.dataset.health=t.player.dataset.health-t.listOfMonsters[t.monstervalue+2],t.listOfMonsters[t.monstervalue+1]=t.listOfMonsters[t.monstervalue+1]-t.player.dataset.strength,t.listOfMonsters[t.monstervalue+1]<=0&&(t.printOutKilled(),t.monstervalue=t.monstervalue+3),t.monstervalue>t.listOfMonsters.length-1&&alert("You won!"),t.render()}}},function(t,e,n){var r=n(2);"string"==typeof r&&(r=[[t.i,r,""]]);var o={insert:"head",singleton:!1};n(4)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,"#header {\n  text-align: center;\n  background: bisque;\n  padding: 20px;\n  clear: both;\n  border-bottom: 3px solid gray;\n}\n#header h1 {\n  font-size: 40px;\n}\n#monsters {\n  display: none;\n}\n#combatArea {\n  display: flex;\n  align-items: center;\n}\n#player,\n#monster {\n  padding: 20px 40px;\n  text-align: center;\n  flex-grow: 2;\n}\n#fight {\n  flex-grow: 1;\n}\nlabel {\n  display: inline-block;\n  min-width: 100px;\n}\n",""])},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(a=r,i=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),"/*# ".concat(l," */")),s=r.sources.map(function(t){return"/*# sourceURL=".concat(r.sourceRoot).concat(t," */")});return[n].concat(s).concat([o]).join("\n")}var a,i,l;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2],"{").concat(n,"}"):n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var s=this[o][0];null!=s&&(r[s]=!0)}for(var a=0;a<t.length;a++){var i=t[a];null!=i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="(".concat(i[2],") and (").concat(n,")")),e.push(i))}},e}},function(t,e,n){"use strict";var r,o={},s=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}();function i(t,e){for(var n=[],r={},o=0;o<t.length;o++){var s=t[o],a=e.base?s[0]+e.base:s[0],i={css:s[1],media:s[2],sourceMap:s[3]};r[a]?r[a].parts.push(i):n.push(r[a]={id:a,parts:[i]})}return n}function l(t,e){for(var n=0;n<t.length;n++){var r=t[n],s=o[r.id],a=0;if(s){for(s.refs++;a<s.parts.length;a++)s.parts[a](r.parts[a]);for(;a<r.parts.length;a++)s.parts.push(m(r.parts[a],e))}else{for(var i=[];a<r.parts.length;a++)i.push(m(r.parts[a],e));o[r.id]={id:r.id,refs:1,parts:i}}}}function u(t){var e=document.createElement("style");if(void 0===t.attributes.nonce){var r=n.nc;r&&(t.attributes.nonce=r)}if(Object.keys(t.attributes).forEach(function(n){e.setAttribute(n,t.attributes[n])}),"function"==typeof t.insert)t.insert(e);else{var o=a(t.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}return e}var c,h=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function p(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=h(e,o);else{var s=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(s,a[e]):t.appendChild(s)}}var f=null,d=0;function m(t,e){var n,r,o;if(e.singleton){var s=d++;n=f||(f=u(e)),r=p.bind(null,n,s,!1),o=p.bind(null,n,s,!0)}else n=u(e),r=function(t,e,n){var r=n.css,o=n.media,s=n.sourceMap;if(o&&t.setAttribute("media",o),s&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).attributes="object"==typeof e.attributes?e.attributes:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s());var n=i(t,e);return l(n,e),function(t){for(var r=[],s=0;s<n.length;s++){var a=n[s],u=o[a.id];u&&(u.refs--,r.push(u))}t&&l(i(t,e),e);for(var c=0;c<r.length;c++){var h=r[c];if(0===h.refs){for(var p=0;p<h.parts.length;p++)h.parts[p]();delete o[h.id]}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,